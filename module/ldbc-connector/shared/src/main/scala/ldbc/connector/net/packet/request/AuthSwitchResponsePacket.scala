/**
 * Copyright (c) 2023-2025 by Takahiko Tominaga
 * This software is licensed under the MIT License (MIT).
 * For more information see LICENSE or https://opensource.org/licenses/MIT
 */

package ldbc.connector.net.packet
package request

import scodec.*
import scodec.bits.*

/**
 * Authentication Method Switch Response Packet which contains response data generated by the authentication method requested in Protocol::OldAuthSwitchRequest: packet.
 *
 * This data is opaque to the protocol.
 */
trait AuthSwitchResponsePacket extends RequestPacket:

  /**
   *   Type: string<EOF>
   *   Name: data
   *   Description: authentication response data
   */
  def hashedPassword: ByteVector

object AuthSwitchResponsePacket:

  def apply(hashedPassword: ByteVector): AuthSwitchResponsePacket = Impl(hashedPassword)

  private[ldbc] def unsafeFromBytes(bytes: Array[Byte]): AuthSwitchResponsePacket = Impl(
    ByteVector(bytes)
  )

  private case class Impl(
    hashedPassword: ByteVector
  ) extends AuthSwitchResponsePacket:

    override protected def encodeBody: Attempt[BitVector] = encoder.encode(this)

    override def encode: BitVector =
      encodeBody.require

    override def toString: String = "Protocol::AuthSwitchResponse"

  val encoder: Encoder[AuthSwitchResponsePacket] = Encoder { authSwitchResponsePacket =>
    Attempt.Successful(
      authSwitchResponsePacket.hashedPassword.toBitVector
    )
  }
