/**
 * Copyright (c) 2023-2025 by Takahiko Tominaga
 * This software is licensed under the MIT License (MIT).
 * For more information see LICENSE or https://opensource.org/licenses/MIT
 */

package ldbc.statement.internal

import BinaryPolyFunc.Case
import TupleOps.{ AppendOne, FoldLeft }

object TupleOps:
  trait AppendOne[P, S]:
    type Out
    def apply(prefix: P, last: S): Out
  object AppendOne extends TupleAppendOneInstances

  trait FoldLeft[In, T, Op]:
    type Out
    def apply(zero: In, tuple: T): Out
  object FoldLeft extends TupleFoldInstances

  trait Join[P, S]:
    type Out
    def apply(prefix: P, suffix: S): Out
  type JoinAux[P, S, O] = Join[P, S] { type Out = O }
  object Join extends LowLevelJoinImplicits:
    // O(1) shortcut for the Join[Unit, T] case to avoid O(n) runtime in this case
    given [T]: JoinAux[Unit, T, T] =
      new Join[Unit, T] {
        type Out = T
        def apply(prefix: Unit, suffix: T): Out = suffix
      }
    // we implement the join by folding over the suffix with the prefix as growing accumulator
    object Fold extends BinaryPolyFunc:
      given [T, A] (using append: AppendOne[T, A]): (BinaryPolyFunc.Case[T, A, Fold.type] { type Out = append.Out }) =
        at[T, A](append(_, _))

  sealed abstract class LowLevelJoinImplicits:
    given [P, S] (using fold: FoldLeft[P, S, Join.Fold.type]): JoinAux[P, S, fold.Out] =
      new Join[P, S] {
        type Out = fold.Out
        def apply(prefix: P, suffix: S): Out = fold(prefix, suffix)
      }

/**
  * Allows the definition of binary poly-functions (e.g. for folding over tuples).
  *
  * Note: the poly-function implementation seen here is merely a stripped down version of
  * what Miles Sabin made available with his awesome shapeless library. All credit goes to him!
  */
trait BinaryPolyFunc:
  def at[A, B] = CaseBuilder[A, B]
  class CaseBuilder[A, B]:
    def apply[R](f: (A, B) => R) = new BinaryPolyFunc.Case[A, B, BinaryPolyFunc.this.type]:
      type Out = R
      def apply(a: A, b: B) = f(a, b)

object BinaryPolyFunc:
  sealed trait Case[A, B, Op]:
    type Out
    def apply(a: A, b: B): Out

abstract class TupleFoldInstances:
  type Aux[In, T, Op, Out0] = FoldLeft[In, T, Op] { type Out = Out0 }

  given [In, Op]: Aux[In, Unit, Op, In] =
    new FoldLeft[In, Unit, Op] {
      type Out = In
      def apply(zero: In, tuple: Unit): Out = zero
    }

  given [In, A, Op] (using f: Case[In, A, Op]): Aux[In, Tuple1[A], Op, f.Out] =
    new FoldLeft[In, Tuple1[A], Op] {
      type Out = f.Out
      def apply(zero: In, tuple: Tuple1[A]) = f(zero, tuple._1)
    }

  [2..22#given [In, [2..#T0#], X, T1, Op] (using fold: Aux[In, Tuple0[[2..#T0#]], Op, X], f: Case[X, T1, Op]): Aux[In, Tuple1[[#T1#]], Op, f.Out] =
    new FoldLeft[In, Tuple1[[#T1#]], Op] {
      type Out = f.Out
      def apply(zero: In, t: Tuple1[[#T1#]]) =
        f(fold(zero, Tuple0([2..#t._0#])), t._1)
    }#
  ]

abstract class TupleAppendOneInstances:
  type Aux[P, S, Out0] = AppendOne[P, S] { type Out = Out0 }

  given [T1]: Aux[Unit, T1, Tuple1[T1]] =
    new AppendOne[Unit, T1] {
      type Out = Tuple1[T1]
      def apply(prefix: Unit, last: T1): Tuple1[T1] = Tuple1(last)
    }

  [1..21#given [[#T1#], L]: Aux[Tuple1[[#T1#]], L, Tuple2[[#T1#], L]] =
    new AppendOne[Tuple1[[#T1#]], L] {
      type Out = Tuple2[[#T1#], L]
      def apply(prefix: Tuple1[[#T1#]], last: L): Tuple2[[#T1#], L] = Tuple2([#prefix._1#], last)
    }#
  ]
